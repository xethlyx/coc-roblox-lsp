--# selene: allow(unused_variable)
---@diagnostic disable: unused-local

-- string	(default "")
-- 			local to buffer
-- 	The 'cinoptions' affect the way 'cindent' reindents lines in a C
-- 	program.  See |cinoptions-values| for the values of this option, and
-- 	|C-indenting| for info on C indenting in general.
vim.bo.cinoptions = ""
-- string	(default "if,else,while,do,for,switch")
-- 			local to buffer
-- 	These keywords start an extra indent in the next line when
-- 	'smartindent' or 'cindent' is set.  For 'cindent' this is only done at
-- 	an appropriate place (inside {}).
-- 	Note that 'ignorecase' isn't used for 'cinwords'.  If case doesn't
-- 	matter, include the keyword both the uppercase and lowercase:
-- 	"if,If,IF".
vim.bo.cinwords = "if,else,while,do,for,switch"
vim.bo.thesaurusfunc = ""
-- boolean	(default on)
-- 			local to buffer
-- 	When off the buffer contents cannot be changed.  The 'fileformat' and
-- 	'fileencoding' options also can't be changed.
-- 	Can be reset on startup with the |-M| command line argument.
vim.bo.modifiable = "true"
-- boolean	(default off)
-- 			local to buffer
-- 	When on, the buffer is considered to be modified.  This option is set
-- 	when:
-- 	1. A change was made to the text since it was last written.  Using the
-- 	   |undo| command to go back to the original text will reset the
-- 	   option.  But undoing changes that were made before writing the
-- 	   buffer will set the option again, since the text is different from
-- 	   when it was written.
-- 	2. 'fileformat' or 'fileencoding' is different from its original
-- 	   value.  The original value is set when the buffer is read or
-- 	   written.  A ":set nomodified" command also resets the original
-- 	   values to the current values and the 'modified' option will be
-- 	   reset.
-- 	   Similarly for 'eol' and 'bomb'.
-- 	This option is not set when a change is made to the buffer as the
-- 	result of a BufNewFile, BufRead/BufReadPost, BufWritePost,
-- 	FileAppendPost or VimLeave autocommand event.  See |gzip-example| for
-- 	an explanation.
-- 	When 'buftype' is "nowrite" or "nofile" this option may be set, but
-- 	will be ignored.
-- 	Note that the text may actually be the same, e.g. 'modified' is set
-- 	when using "rA" on an "A".
vim.bo.modified = "false"
-- boolean	(default off)
-- 			local to buffer
-- 	If on, writes fail unless you use a '!'.  Protects you from
-- 	accidentally overwriting a file.  Default on when Vim is started
-- 	in read-only mode ("vim -R") or when the executable is called "view".
-- 	When using ":w!" the 'readonly' option is reset for the current
-- 	buffer, unless the 'Z' flag is in 'cpoptions'.
-- 	When using the ":view" command the 'readonly' option is
-- 	set for the newly edited buffer.
-- 	See 'modifiable' for disallowing changes to the buffer.
vim.bo.readonly = "false"
-- string (default: "")
-- 			local to buffer
-- 	When this option is set, the FileType autocommand event is triggered.
-- 	All autocommands that match with the value of this option will be
-- 	executed.  Thus the value of 'filetype' is used in place of the file
-- 	name.
-- 	Otherwise this option does not always reflect the current file type.
-- 	This option is normally set when the file type is detected.  To enable
-- 	this use the ":filetype on" command. |:filetype|
-- 	Setting this option to a different value is most useful in a modeline,
-- 	for a file for which the file type is not automatically recognized.
-- 	Example, for in an IDL file:
-- 		/* vim: set filetype=idl : */ ~
-- 	|FileType| |filetypes|
-- 	When a dot appears in the value then this separates two filetype
-- 	names.  Example:
-- 		/* vim: set filetype=c.doxygen : */ ~
-- 	This will use the "c" filetype first, then the "doxygen" filetype.
-- 	This works both for filetype plugins and for syntax files.  More than
-- 	one dot may appear.
-- 	This option is not copied to another buffer, independent of the 's' or
-- 	'S' flag in 'cpoptions'.
-- 	Only normal file name characters can be used, "/\*?[|<>" are illegal.
vim.bo.filetype = ""
-- boolean	(default off)
-- 			local to buffer
-- 	Copy the structure of the existing lines indent when autoindenting a
-- 	new line.  Normally the new indent is reconstructed by a series of
-- 	tabs followed by spaces as required (unless |'expandtab'| is enabled,
-- 	in which case only spaces are used).  Enabling this option makes the
-- 	new line copy whatever characters were used for indenting on the
-- 	existing line.  'expandtab' has no effect on these characters, a Tab
-- 	remains a Tab.  If the new indent is greater than on the existing
-- 	line, the remaining space is filled in the normal manner.
-- 	See 'preserveindent'.
vim.bo.copyindent = "false"
-- string	(default: "")
-- 			local to buffer
-- 			{only for MS-Windows}
-- 	When this option is set it overrules 'shellslash' for completion:
-- 	- When this option is set to "slash", a forward slash is used for path
-- 	  completion in insert mode. This is useful when editing HTML tag, or
-- 	  Makefile with 'noshellslash' on Windows.
-- 	- When this option is set to "backslash", backslash is used. This is
-- 	  useful when editing a batch file with 'shellslash' set on Windows.
-- 	- When this option is empty, same character is used as for
-- 	  'shellslash'.
-- 	For Insert mode completion the buffer-local value is used.  For
-- 	command line completion the global value is used.
vim.bo.completeslash = ""
-- string	(default: ".,w,b,u,t")
-- 			local to buffer
-- 	This option specifies how keyword completion |ins-completion| works
-- 	when CTRL-P or CTRL-N are used.  It is also used for whole-line
-- 	completion |i_CTRL-X_CTRL-L|.  It indicates the type of completion
-- 	and the places to scan.  It is a comma separated list of flags:
-- 	.	scan the current buffer ('wrapscan' is ignored)
-- 	w	scan buffers from other windows
-- 	b	scan other loaded buffers that are in the buffer list
-- 	u	scan the unloaded buffers that are in the buffer list
-- 	U	scan the buffers that are not in the buffer list
-- 	k	scan the files given with the 'dictionary' option
-- 	kspell  use the currently active spell checking |spell|
-- 	k{dict}	scan the file {dict}.  Several "k" flags can be given,
-- 		patterns are valid too.  For example: >
-- 			:set cpt=k/usr/dict/*,k~/spanish
-- <	s	scan the files given with the 'thesaurus' option
-- 	s{tsr}	scan the file {tsr}.  Several "s" flags can be given, patterns
-- 		are valid too.
-- 	i	scan current and included files
-- 	d	scan current and included files for defined name or macro
-- 		|i_CTRL-X_CTRL-D|
-- 	]	tag completion
-- 	t	same as "]"
vim.bo.complete = ".,w,b,u,t"
-- string	(default: empty)
-- 			local to buffer
-- 	This option specifies a function to be used for Insert mode completion
-- 	with CTRL-X CTRL-U. |i_CTRL-X_CTRL-U|
-- 	See |complete-functions| for an explanation of how the function is
-- 	invoked and what it should return.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.bo.completefunc = ""
-- string	(default "")
-- 			local to buffer
-- 	Name of a keyboard mapping.  See |mbyte-keymap|.
-- 	Setting this option to a valid keymap name has the side effect of
-- 	setting 'iminsert' to one, so that the keymap becomes effective.
-- 	'imsearch' is also set to one, unless it was -1
-- 	Only normal file name characters can be used, "/\*?[|<>" are illegal.
vim.bo.keymap = ""
-- string	(default "bin,hex")
-- 			local to buffer
-- 	This defines what bases Vim will consider for numbers when using the
-- 	CTRL-A and CTRL-X commands for adding to and subtracting from a number
-- 	respectively; see |CTRL-A| for more info on these commands.
-- 	alpha	If included, single alphabetical characters will be
-- 		incremented or decremented.  This is useful for a list with a
-- 		letter index a), b), etc.		*octal-nrformats*
-- 	octal	If included, numbers that start with a zero will be considered
-- 		to be octal.  Example: Using CTRL-A on "007" results in "010".
-- 	hex	If included, numbers starting with "0x" or "0X" will be
-- 		considered to be hexadecimal.  Example: Using CTRL-X on
-- 		"0x100" results in "0x0ff".
-- 	bin	If included, numbers starting with "0b" or "0B" will be
-- 		considered to be binary.  Example: Using CTRL-X on
-- 		"0b1000" subtracts one, resulting in "0b0111".
-- 	Numbers which simply begin with a digit in the range 1-9 are always
-- 	considered decimal.  This also happens for numbers that are not
-- 	recognized as octal or hex.
vim.bo.nrformats = "bin,hex"
-- string	(default "make")
-- 			global or local to buffer |global-local|
-- 	Program to use for the ":make" command.  See |:make_makeprg|.
-- 	This option may contain '%' and '#' characters (see  |:_%| and |:_#|),
-- 	which are expanded to the current and alternate file name.  Use |::S|
-- 	to escape file names in case they contain special characters.
-- 	Environment variables are expanded |:set_env|.  See |option-backslash|
-- 	about including spaces and backslashes.
-- 	Note that a '|' must be escaped twice: once for ":set" and once for
-- 	the interpretation of a command.  When you use a filter called
-- 	"myfilter" do it like this: >
-- 	    :set makeprg=gmake\ \\\|\ myfilter
-- <	The placeholder "$*" can be given (even multiple times) to specify
-- 	where the arguments will be included, for example: >
-- 	    :set makeprg=latex\ \\\\nonstopmode\ \\\\input\\{$*}
-- <	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.bo.makeprg = "make"
-- string	(default "^\s*#\s*include")
-- 			global or local to buffer |global-local|
-- 	Pattern to be used to find an include command.  It is a search
-- 	pattern, just like for the "/" command (See |pattern|).  The default
-- 	value is for C programs.  This option is used for the commands "[i",
-- 	"]I", "[d", etc.
-- 	Normally the 'isfname' option is used to recognize the file name that
-- 	comes after the matched pattern.  But if "\zs" appears in the pattern
-- 	then the text matched from "\zs" to the end, or until "\ze" if it
-- 	appears, is used as the file name.  Use this to include characters
-- 	that are not in 'isfname', such as a space.  You can then use
-- 	'includeexpr' to process the matched text.
-- 	See |option-backslash| about including spaces and backslashes.
vim.bo.include = "^\\s*#\\s*include"
-- string	(default "")
-- 			local to buffer
-- 	Comma separated list of suffixes, which are used when searching for a
-- 	file for the "gf", "[I", etc. commands.  Example: >
-- 		:set suffixesadd=.java
-- <
-- 				*'swapfile'* *'swf'* *'noswapfile'* *'noswf'*
vim.bo.suffixesadd = ""
-- number	(default: 10000)
-- 			local to buffer
-- 	Maximum number of lines kept beyond the visible screen. Lines at the
-- 	top are deleted if new lines exceed this limit.
-- 	Minimum is 1, maximum is 100000.
-- 	Only in |terminal| buffers.
vim.bo.scrollback = "-1"
vim.bo.spelloptions = ""
-- number	(default 0)
-- 			local to buffer
-- 	Number of characters from the right window border where wrapping
-- 	starts.  When typing text beyond this limit, an <EOL> will be inserted
-- 	and inserting continues on the next line.
-- 	Options that add a margin, such as 'number' and 'foldcolumn', cause
-- 	the text width to be further reduced.  This is Vi compatible.
-- 	When 'textwidth' is non-zero, this option is not used.
-- 	See also 'formatoptions' and |ins-textwidth|.
vim.bo.wrapmargin = "0"
vim.bo.cinscopedecls = "public,protected,private"
-- string	(default empty)
-- 			local to buffer
-- 	When this option is set, the syntax with this name is loaded, unless
-- 	syntax highlighting has been switched off with ":syntax off".
-- 	Otherwise this option does not always reflect the current syntax (the
-- 	b:current_syntax variable does).
-- 	This option is most useful in a modeline, for a file which syntax is
-- 	not automatically recognized.  Example, in an IDL file:
-- 		/* vim: set syntax=idl : */ ~
-- 	When a dot appears in the value then this separates two filetype
-- 	names.  Example:
-- 		/* vim: set syntax=c.doxygen : */ ~
-- 	This will use the "c" syntax first, then the "doxygen" syntax.
-- 	Note that the second one must be prepared to be loaded as an addition,
-- 	otherwise it will be skipped.  More than one dot may appear.
-- 	To switch off syntax highlighting for the current file, use: >
-- 		:set syntax=OFF
-- <	To switch syntax highlighting on according to the current value of the
-- 	'filetype' option: >
-- 		:set syntax=ON
-- <	What actually happens when setting the 'syntax' option is that the
-- 	Syntax autocommand event is triggered with the value as argument.
-- 	This option is not copied to another buffer, independent of the 's' or
-- 	'S' flag in 'cpoptions'.
-- 	Only normal file name characters can be used, "/\*?[|<>" are illegal.
vim.bo.syntax = ""
-- boolean (default on)
-- 			local to buffer
-- 	Use a swapfile for the buffer.  This option can be reset when a
-- 	swapfile is not wanted for a specific buffer.  For example, with
-- 	confidential information that even root must not be able to access.
-- 	Careful: All text will be in memory:
-- 		- Don't use this for big files.
-- 		- Recovery will be impossible!
-- 	A swapfile will only be present when |'updatecount'| is non-zero and
-- 	'swapfile' is set.
-- 	When 'swapfile' is reset, the swap file for the current buffer is
-- 	immediately deleted.  When 'swapfile' is set, and 'updatecount' is
-- 	non-zero, a swap file is immediately created.
-- 	Also see |swap-file|.
-- 	If you want to open a new buffer without creating a swap file for it,
-- 	use the |:noswapfile| modifier.
-- 	See 'directory' for where the swap file is created.
vim.bo.swapfile = "true"
-- boolean	(default off)
-- 			local to buffer
-- 	When changing the indent of the current line, preserve as much of the
-- 	indent structure as possible.  Normally the indent is replaced by a
-- 	series of tabs followed by spaces as required (unless |'expandtab'| is
-- 	enabled, in which case only spaces are used).  Enabling this option
-- 	means the indent will preserve as many existing characters as possible
-- 	for indenting, and only add additional tabs or spaces as required.
-- 	'expandtab' does not apply to the preserved white space, a Tab remains
-- 	a Tab.
-- 	NOTE: When using ">>" multiple times the resulting indent is a mix of
-- 	tabs and spaces.  You might not like this.
-- 	Also see 'copyindent'.
-- 	Use |:retab| to clean up white space.
vim.bo.preserveindent = "false"
-- string	(default "./tags;,tags")
-- 			global or local to buffer |global-local|
-- 	Filenames for the tag command, separated by spaces or commas.  To
-- 	include a space or comma in a file name, precede it with a backslash
-- 	(see |option-backslash| about including spaces and backslashes).
-- 	When a file name starts with "./", the '.' is replaced with the path
-- 	of the current file.  But only when the 'd' flag is not included in
-- 	'cpoptions'.  Environment variables are expanded |:set_env|.  Also see
-- 	|tags-option|.
-- 	"*", "**" and other wildcards can be used to search for tags files in
-- 	a directory tree.  See |file-searching|.  E.g., "/lib/**/tags" will
-- 	find all files named "tags" below "/lib".  The filename itself cannot
-- 	contain wildcards, it is used as-is.  E.g., "/lib/**/tags?" will find
-- 	files called "tags?".
-- 	The |tagfiles()| function can be used to get a list of the file names
-- 	actually used.
-- 	The use of |:set+=| and |:set-=| is preferred when adding or removing
-- 	file names from the list.  This avoids problems when a future version
-- 	uses another default.
vim.bo.tags = "./tags;,tags"
-- string	(default "")
-- 			global or local to buffer |global-local|
-- 	List of file names, separated by commas, that are used to lookup words
-- 	for keyword completion commands |i_CTRL-X_CTRL-K|.  Each file should
-- 	contain a list of words.  This can be one word per line, or several
-- 	words per line, separated by non-keyword characters (white space is
-- 	preferred).  Maximum line length is 510 bytes.
vim.bo.dictionary = ""
-- boolean	(default off)
-- 			local to buffer
-- 	This option should be set before editing a binary file.  You can also
-- 	use the |-b| Vim argument.  When this option is switched on a few
-- 	options will be changed (also when it already was on):
-- 		'textwidth'  will be set to 0
-- 		'wrapmargin' will be set to 0
-- 		'modeline'   will be off
-- 		'expandtab'  will be off
-- 	Also, 'fileformat' and 'fileformats' options will not be used, the
-- 	file is read and written like 'fileformat' was "unix" (a single <NL>
-- 	separates lines).
-- 	The 'fileencoding' and 'fileencodings' options will not be used, the
-- 	file is read without conversion.
-- 	NOTE: When you start editing a(nother) file while the 'bin' option is
-- 	on, settings from autocommands may change the settings again (e.g.,
-- 	'textwidth'), causing trouble when editing.  You might want to set
-- 	'bin' again when the file has been loaded.
-- 	The previous values of these options are remembered and restored when
-- 	'bin' is switched from on to off.  Each buffer has its own set of
-- 	saved option values.
-- 	To edit a file with 'binary' set you can use the |++bin| argument.
-- 	This avoids you have to do ":set bin", which would have effect for all
-- 	files you edit.
-- 	When writing a file the <EOL> for the last line is only written if
-- 	there was one in the original file (normally Vim appends an <EOL> to
-- 	the last line if there is none; this would make the file longer).  See
-- 	the 'endofline' option.
vim.bo.binary = "false"
-- boolean	(default off)
-- 			local to buffer
-- 	When writing a file and the following conditions are met, a BOM (Byte
-- 	Order Mark) is prepended to the file:
-- 	- this option is on
-- 	- the 'binary' option is off
-- 	- 'fileencoding' is "utf-8", "ucs-2", "ucs-4" or one of the little/big
-- 	  endian variants.
-- 	Some applications use the BOM to recognize the encoding of the file.
-- 	Often used for UCS-2 files on MS-Windows.  For other applications it
-- 	causes trouble, for example: "cat file1 file2" makes the BOM of file2
-- 	appear halfway through the resulting file.  Gcc doesn't accept a BOM.
-- 	When Vim reads a file and 'fileencodings' starts with "ucs-bom", a
-- 	check for the presence of the BOM is done and 'bomb' set accordingly.
-- 	Unless 'binary' is set, it is removed from the first line, so that you
-- 	don't see it when editing.  When you don't change the options, the BOM
-- 	will be restored when writing the file.
vim.bo.bomb = "false"
-- string (default "")
-- 			global or local to buffer |global-local|
-- 	The name of an external program that will be used to format the lines
-- 	selected with the |gq| operator.  The program must take the input on
-- 	stdin and produce the output on stdout.  The Unix program "fmt" is
-- 	such a program.
-- 	If the 'formatexpr' option is not empty it will be used instead.
-- 	Otherwise, if 'formatprg' option is an empty string, the internal
-- 	format function will be used |C-indenting|.
-- 	Environment variables are expanded |:set_env|.  See |option-backslash|
-- 	about including spaces and backslashes.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.bo.formatprg = ""
-- string	(default "")
-- 			local to buffer
-- 			{only available when compiled with the |+vartabs|
-- 			feature}
-- 	A list of the number of spaces that a <Tab> in the file counts for,
-- 	separated by commas.  Each value corresponds to one tab, with the
-- 	final value applying to all subsequent tabs. For example: >
-- 		:set vartabstop=4,20,10,8
-- <	This will make the first tab 4 spaces wide, the second 20 spaces,
-- 	the third 10 spaces, and all following tabs 8 spaces.
vim.bo.vartabstop = ""
-- number	(default 8)
-- 			local to buffer
-- 	Number of spaces to use for each step of (auto)indent.  Used for
-- 	|'cindent'|, |>>|, |<<|, etc.
-- 	When zero the 'ts' value will be used.  Use the |shiftwidth()|
-- 	function to get the effective shiftwidth value.
vim.bo.shiftwidth = "8"
